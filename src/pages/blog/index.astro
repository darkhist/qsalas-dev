---
import { getCollection } from "astro:content";

import BaseLayout from "../../layouts/BaseLayout.astro";

import cleanId from "../../utils/cleanId";
import formatDate from "../../utils/formatDate";

const posts = await getCollection("blog");
const sortedPosts = posts.sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf(),
);
const years = [
  ...new Set(sortedPosts.map((post) => post.data.date.getFullYear())),
].sort((a, b) => b - a);
---

<BaseLayout
  title="Anaphora Â· Quinn Salas"
  description="Ideas, photos, music, technology, and other stuff too, probably."
>
  <div class="content">
    <h1>Anaphora</h1>
    <p class="page-description">
      Ideas, photos, music, code, and other stuff too, probably.
    </p>
    <div class="year-filters">
      <button class="year-filter active" data-year="all">All</button>
      {
        years.map((year) => (
          <button class="year-filter" data-year={year}>
            {year}
          </button>
        ))
      }
    </div>
    <ul class="posts">
      {
        sortedPosts.map((post) => (
          <li
            class="post-item"
            id={`post-${cleanId(post.id)}`}
            data-year={post.data.date.getFullYear()}
          >
            <a href={`/blog/${cleanId(post.id)}`}>
              <div class="post-info">
                <h2>{post.data.title}</h2>
                <time datetime={post.data.date.toISOString()}>
                  {formatDate(post.data.date)}
                </time>
              </div>
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</BaseLayout>

<style>
  .page-description {
    margin-bottom: var(--space-lg);
    color: var(--subtext0);
  }

  .year-filters {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 2.5rem;
    flex-wrap: wrap;
  }

  .year-filter {
    background: var(--surface0);
    border: none;
    color: var(--text);
    padding: 0.5rem 1.25rem;
    border-radius: 8px;
    cursor: pointer;
    font-family: inherit;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .year-filter:hover {
    background: var(--surface1);
    transform: translateY(-1px);
  }

  .year-filter:focus-visible {
    outline: 2px solid var(--peach);
    outline-offset: 2px;
  }

  .year-filter.active {
    background: var(--peach);
    color: var(--base);
  }

  .year-filter:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px var(--peach);
    border-radius: 4px;
  }

  .posts {
    padding-left: 0;
  }

  .post-item {
    scroll-margin-top: 15rem;
    padding: 0 0.15rem;
    margin-bottom: var(--space-xl);
    transition: transform 0.2s ease;
    list-style-type: none;
  }

  .post-item.hidden {
    display: none;
  }

  .post-item:last-of-type {
    margin-bottom: 0;
  }

  /* Post link styling */
  .posts .post-item a {
    display: block;
    color: inherit;
    text-decoration: none;
    padding: 0.75rem;
    margin: -0.75rem;
    border-radius: 8px;
    transition: background 0.2s ease;
  }

  /* Hover */
  .posts .post-item a:hover {
    background: rgba(255, 255, 255, 0.03);
  }

  /* Focus visible */
  .post-item a:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px var(--peach);
    border-radius: 8px;
  }

  .posts .post-item a:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px var(--peach);
    border-radius: 8px;
  }

  /* Highlight when returning from a post */
  .posts .post-item a.highlighted {
    background: var(--surface1);
    color: var(--base);
    animation: fadeHighlight 2s ease-out;
  }

  @keyframes fadeHighlight {
    0% {
      background: var(--surface1);
    }
    100% {
      background: transparent;
    }
  }

  /* Prevent double focus ring */
  .posts .post-item a:focus {
    outline: none;
    box-shadow: none;
  }

  /* Title styling */
  .post-item h2 {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    color: var(--mauve);
    transition: color 0.2s ease;
  }

  .post-item a:hover h2,
  .post-item a:focus-visible h2 {
    color: var(--peach);
  }

  /* Date styling */
  time {
    display: block;
    font-size: 0.85rem;
    font-weight: 400;
    color: var(--subtext0);
    transition: color 0.2s ease;
  }

  .post-item a:hover time,
  .post-item a:focus-visible time {
    color: var(--text);
  }

  @media (min-width: 768px) {
    .post-item h2 {
      font-size: 1.125rem;
      margin-bottom: 0;
    }

    .post-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: var(--space-sm);
    }

    time {
      font-size: 0.85rem;
      font-weight: 400;
      color: var(--subtext0);
    }
  }

  @media (min-width: 768px) {
    .post-item h2 {
      font-size: 1.125rem;
      margin-bottom: 0;
    }

    .post-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: var(--space-sm);
    }

    time {
      display: block;
      color: var(--subtext0);
      font-size: 1rem;
    }
  }
</style>

<script>
  // Save last-read post ID
  document.querySelectorAll(".post-item a").forEach((link) => {
    link.addEventListener("click", (e) => {
      const target = e.currentTarget as HTMLAnchorElement;
      const postId = target.closest(".post-item")?.id;
      if (postId) sessionStorage.setItem("returnToPost", postId);
    });
  });

  // Try to restore scroll and focus after returning
  const returnToPost = sessionStorage.getItem("returnToPost");
  if (returnToPost) {
    sessionStorage.removeItem("returnToPost");

    requestAnimationFrame(() => {
      const element = document.getElementById(returnToPost);
      if (!element) return;

      // Find the link within the post item
      const link = element.querySelector("a");
      if (!link) return;

      // Smooth scroll the list item
      element.scrollIntoView({ behavior: "smooth", block: "center" });

      // Add temporary highlight class to the link
      link.classList.add("highlighted");

      // Announce and focus
      const announcer = document.getElementById("sr-announcer");
      if (announcer) announcer.textContent = "Returned to your last read post.";

      link.focus({ preventScroll: true });

      // Remove highlight after fade
      setTimeout(() => link.classList.remove("highlighted"), 1700);
    });
  }
</script>

<!-- Hidden live region for screen readers -->
<div id="sr-announcer" aria-live="polite" class="sr-only"></div>

<script>
  // Filter posts by year
  const filters = document.querySelectorAll<HTMLButtonElement>(".year-filter");
  const posts = document.querySelectorAll<HTMLElement>(".post-item");

  filters.forEach((filter) => {
    filter.addEventListener("click", () => {
      const year = filter.dataset.year;

      // Update active state
      filters.forEach((f) => f.classList.remove("active"));
      filter.classList.add("active");

      // Filter posts
      posts.forEach((post) => {
        const postYear = post.dataset.year;

        if (year === "all" || postYear === year) {
          post.classList.remove("hidden");
        } else {
          post.classList.add("hidden");
        }
      });

      // Announce
      const announcer = document.getElementById("sr-announcer");
      if (announcer) {
        announcer.textContent = `Showing posts for ${year === "all" ? "all years" : year}`;
      }
    });
  });
</script>
